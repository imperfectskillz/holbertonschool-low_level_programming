#!/usr/bin/perl -w
# (c) 2001, Dave Jones. (the file handling bit)
# (c) 2005, Joel Schopp <jschopp@austin.ibm.com> (the ugly bit)
# (c) 2007,2008, Andy Whitcroft <apw@uk.ibm.com> (new conditions, test suite)
# (c) 2008-2010 Andy Whitcroft <apw@canonical.com>
# Licensed under the terms of the GNU GPL License version 2

use strict;
use POSIX;
use File::Basename;
use Cwd 'abs_path';
use Term::ANSIColor qw(:constants);

my $P = $0;
my $D = dirname(abs_path($P));

my $V = '0.32';

use Getopt::Long qw(:config no_auto_abbrev);

my $quiet = 0;
my $tree = 0;
my $chk_signoff = 1;
my $chk_patch = 1;
my $tst_only;
my $emacs = 0;
my $terse = 1;
my $showfile = 0;
my $file = 1;
my $git = 0;
my %git_commits = ();
my $check = 0;
my $check_orig = 0;
my $summary = 1;
my $mailback = 0;
my $summary_file = 0;
my $show_types = 0;
my $list_types = 0;
my $fix = 0;
my $fix_inplace = 0;
my $root;
my %debug;
my %camelcase = ();
my %use_type = ();
my @use = ();
my %ignore_type = ();
my @ignore = ();
my $help = 0;
my $printVersion = 0;
my $configuration_file = ".checkpatch.conf";
my $max_line_length = 80;
my $max_func_length = 40;
my $max_funcs = 5;
my $safe_guard = 1;
my $allow_global_variables = 0;
my $ignore_perl_version = 0;
my $minimum_perl_version = 5.10.0;
my $min_conf_desc_length = 4;
my $spelling_file = "$D/spelling.txt";
my $codespell = 0;
my $codespellfile = "/usr/share/codespell/dictionary.txt";
my $color = 1;
my $recursive = 0;

sub printVersion {
    my ($exitcode) = @_;

    print << "EOM";
    Version: $V
EOM
exit($exitcode);
}

sub help {
    my ($exitcode) = @_;

    print << "EOM";
    Usage: $P [OPTION]... [FILE]...
	Version: $V

	Options:
  -q, --quiet                Quiet mode
  --tree                     Run with a kernel tree.
  --no-signoff               Do not check for 'Signed-off-by' line
  --patch                    Treat FILE as patchfile (default)
  --emacs                    Emacs compile window format
  --no-terse                 Disable one line per report.
  --showfile                 Emit diffed file position, not input file position
  -g, --git                  Treat FILE as a single commit or git revision range
                             Single git commit with:
                               <rev>
                               <rev>^
                               <rev>~n
                             Multiple git commits with:
                               <rev1>..<rev2>
                               <rev1>...<rev2>
                               <rev>-<count>
                             Git merges are ignored
  --no-file                  Don't treat FILE as regular source file.
  --subjective, --strict     Enable more subjective tests
  --list-types               List the possible message types
  --types TYPE(,TYPE2...)    Show only these comma separated message types
  --ignore TYPE(,TYPE2...)   Ignore various comma separated message types
  --show-types               Show the specific message type in the output
  --min-conf-desc-length=n   Set the min description length, if shorter, warn
  --root=PATH                PATH to the kernel tree root
  --no-summary               Suppress the per-file summary
  --mailback                 Only produce a report in case of warnings/errors
  --summary-file             Include the filename in summary
  --debug KEY=[0|1]          Turn on/off debugging of KEY, where KEY is one of
                             'values', 'possible', 'type', and 'attr' (default
                             is all off)
  --test-only=WORD           Report only warnings/errors containing WORD
                             literally
  --fix                      EXPERIMENTAL - may create horrible results
                             If correctable single-line errors exist, create
                             "<inputfile>.EXPERIMENTAL-checkpatch-fixes"
                             with potential errors corrected to the preferred
                             checkpatch style
  --fix-inplace              EXPERIMENTAL - may create horrible results
                             Is the same as --fix, but overwrites the input
                             file.  It's your fault if there's no backup or git
  --ignore-perl-version      Override checking of perl version.  expect
                             runtime errors.
  --codespell                Use the codespell dictionary for spelling/typos
                             (default:/usr/share/codespell/dictionary.txt)
  --codespellfile            Use this codespell dictionary
  --color                    Use colors when output is STDOUT (default: on)

  --max-line-length=n        Set the maximum length of a line (default: 80)
  --max-func-length=n        Set the maximum length of a function (default: 40)
  --max-funcs=n              Set the maximum declared functions per source file
                             (default: 5)
                             Set it to -1 for infinite
  --no-safe-guard            Don't check for header files protection
  --allow-global-variables   Allow global variable definition
  -r, --recursive            Run for every C source file (.c and .h) recursively

  -h, --help, --version      Display this help and exit

When FILE is - read standard input.
EOM

exit($exitcode);
}

sub uniq {
    my %seen;
    return grep { !$seen{$_}++ } @_;
}

sub list_types {
    my ($exitcode) = @_;

    my $count = 0;

    local $/ = undef;

    open(my $script, '<', abs_path($P)) or
	die "$P: Can't read '$P' $!\n";

    my $text = <$script>;
    close($script);

    my @types = ();
    for ($text =~ /\b(?:(?:CHK|WARN|ERROR)\s*\(\s*"([^"]+)")/g) {
push (@types, $_);
}
@types = sort(uniq(@types));
print("#\tMessage type\n\n");
    foreach my $type (@types) {
	print(++$count . "\t" . $type . "\n");
}

    exit($exitcode);
}

my $conf = which_conf($configuration_file);
if (-f $conf) {
    my @conf_args;
    open(my $conffile, '<', "$conf")
	or warn "$P: Can't find a readable $configuration_file file $!\n";

    while (<$conffile>) {
	my $line = $_;

	$line =~ s/\s*\n?$//g;
	$line =~ s/^\s*//g;
	$line =~ s/\s+/ /g;

	next if ($line =~ m/^\s*#/);
		 next if ($line =~ m/^\s*$/);

		 my @words = split(" ", $line);
		 foreach my $word (@words) {
		     last if ($word =~ m/^#/);
			      push (@conf_args, $word);
			 }
		 }
		 close($conffile);
		 unshift(@ARGV, @conf_args) if @conf_args;
	    }

GetOptions(
    'q|quiet+'=> \$quiet,
    'tree!'=> \$tree,
    'signoff!'=> \$chk_signoff,
    'patch!'=> \$chk_patch,
    'emacs!'=> \$emacs,
    'terse!'=> \$terse,
    'showfile!'=> \$showfile,
    'file!'=> \$file,
    'g|git!'=> \$git,
    'subjective!'=> \$check,
    'strict!'=> \$check,
    'ignore=s'=> \@ignore,
    'types=s'=> \@use,
    'show-types!'=> \$show_types,
    'list-types!'=> \$list_types,
    'min-conf-desc-length=i' => \$min_conf_desc_length,
    'root=s'=> \$root,
    'summary!'=> \$summary,
    'mailback!'=> \$mailback,
    'summary-file!'=> \$summary_file,
    'fix!'=> \$fix,
    'fix-inplace!'=> \$fix_inplace,
    'ignore-perl-version!' => \$ignore_perl_version,
    'debug=s'=> \%debug,
    'test-only=s'=> \$tst_only,
    'codespell!'=> \$codespell,
    'codespellfile=s'=> \$codespellfile,
    'color!'=> \$color,
    'h|help'=> \$help,
    'version'=> \$printVersion,
    'max-line-length=i' => \$max_line_length,
    'max-func-length=i' => \$max_func_length,
    'max-funcs=i'=> \$max_funcs,
    'safe-guard!'=> \$safe_guard,
    'allow-global-variables!'=> \$allow_global_variables,
    'r|recursive!'=> \$recursive
    ) or help(1);

help(0) if ($help);

printVersion(0) if ($printVersion);

list_types(0) if ($list_types);

$fix = 1 if ($fix_inplace);
$check_orig = $check;

my $exit = 0;

if ($^V && $^V lt $minimum_perl_version) {
    printf "$P: requires at least perl version %vd\n", $minimum_perl_version;
    if (!$ignore_perl_version) {
	exit(1);
    }
}

if ($recursive == 0 && $#ARGV < 0) {
    my $exec_name = basename($P);
    print "$exec_name: no input files\n";
    exit(1);
}

sub hash_save_array_words {
    my ($hashRef, $arrayRef) = @_;

    my @array = split(/,/, join(',', @$arrayRef));
    foreach my $word (@array) {
	$word =~ s/\s*\n?$//g;
	$word =~ s/^\s*//g;
	$word =~ s/\s+/ /g;
	$word =~ tr/[a-z]/[A-Z]/;

	next if ($word =~ m/^\s*#/);
		 next if ($word =~ m/^\s*$/);

		 $hashRef->{$word}++;
	    }
    }

sub hash_show_words {
    my ($hashRef, $prefix) = @_;

    if (keys %$hashRef) {
	print "\nNOTE: $prefix message types:";
	foreach my $word (sort keys %$hashRef) {
	    print " $word";
	}
	print "\n";
    }
}

hash_save_array_words(\%ignore_type, \@ignore);
hash_save_array_words(\%use_type, \@use);

my $dbg_values = 0;
my $dbg_possible = 0;
my $dbg_type = 0;
my $dbg_attr = 0;
for my $key (keys %debug) {
    ## no critic
    eval "\${dbg_$key} = '$debug{$key}';";
    die "$@" if ($@);
}

my $rpt_cleaners = 0;

if ($terse) {
    $emacs = 1;
    $quiet++;
}

if ($tree) {
    if (defined $root) {
	if (!top_of_kernel_tree($root)) {
	    die "$P: $root: --root does not point at a valid tree\n";
	}
    } else {
	if (top_of_kernel_tree('.')) {
	    $root = '.';
	} elsif ($0 =~ m@(.*)/scripts/[^/]*$@ &&
		 top_of_kernel_tree($1)) {
	    $root = $1;
	}
    }

    if (!defined $root) {
	print "Must be run from the top-level dir. of a kernel tree\n";
	exit(2);
    }
}

my $emitted_corrupt = 0;

our $Ident= qr{
    [A-Za-z_][A-Za-z\d_]*
	(?:\s*\#\#\s*[A-Za-z_][A-Za-z\d_]*)*
}x;
our $Storage= qr{extern|static|asmlinkage};
our $Sparse= qr{
    __user|
	__kernel|
	__force|
	__iomem|
	__pmem|
	__must_check|
	__init_refok|
	__kprobes|
	__ref|
	__rcu|
	__private
}x;
our $InitAttributePrefix = qr{__(?:mem|cpu|dev|net_|)};
our $InitAttributeData = qr{$InitAttributePrefix(?:initdata\b)};
our $InitAttributeConst = qr{$InitAttributePrefix(?:initconst\b)};
our $InitAttributeInit = qr{$InitAttributePrefix(?:init\b)};
our $InitAttribute = qr{$InitAttributeData|$InitAttributeConst|$InitAttributeInit};

# Notes to $Attribute:
# We need \b after 'init' otherwise 'initconst' will cause a false positive in a check
our $Attribute= qr{
    const|
	__percpu|
	__nocast|
	__safe|
	__bitwise__|
	__packed__|
	__packed2__|
	__naked|
	__maybe_unused|
	__always_unused|
	__noreturn|
	__used|
	__cold|
	__pure|
	__noclone|
	__deprecated|
	__read_mostly|
	__kprobes|
	$InitAttribute|
	____cacheline_aligned|
	____cacheline_aligned_in_smp|
	____cacheline_internodealigned_in_smp|
	__weak
}x;
our $Modifier;
our $Inline= qr{inline|__always_inline|noinline|__inline|__inline__};
our $Member= qr{->$Ident|\.$Ident|\[[^]]*\]};
our $Lval= qr{$Ident(?:$Member)*};

our $Int_type= qr{(?i)llu|ull|ll|lu|ul|l|u};
our $Binary= qr{(?i)0b[01]+$Int_type?};
our $Hex= qr{(?i)0x[0-9a-f]+$Int_type?};
our $Int= qr{[0-9]+$Int_type?};
our $Octal= qr{0[0-7]+$Int_type?};
our $String= qr{"[X\t]*"};
our $Float_hex= qr{(?i)0x[0-9a-f]+p-?[0-9]+[fl]?};
our $Float_dec= qr{(?i)(?:[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)(?:e-?[0-9]+)?[fl]?};
our $Float_int= qr{(?i)[0-9]+e-?[0-9]+[fl]?};
our $Float= qr{$Float_hex|$Float_dec|$Float_int};
our $Constant= qr{$Float|$Binary|$Octal|$Hex|$Int};
our $Assignment= qr{\*\=|/=|%=|\+=|-=|<<=|>>=|&=|\^=|\|=|=};
our $Compare    = qr{<=|>=|==|!=|<|(?<!-)>};
our $Arithmetic = qr{\+|-|\*|\/|%};
our $Operators= qr{
    <=|>=|==|!=|
    =>|->|<<|>>|<|>|!|~|
    &&|\|\||,|\^|\+\+|--|&|\||$Arithmetic
}x;

our $c90_Keywords = qr{do|for|while|if|else|return|goto|continue|switch|default|case|break}x;

our $BasicType;
our $NonptrType;
our $NonptrTypeMisordered;
our $NonptrTypeWithAttr;
our $Type;
our $TypeMisordered;
our $Declare;
our $DeclareMisordered;

our $NON_ASCII_UTF8= qr{
[\xC2-\xDF][\x80-\xBF]               # non-overlong 2-byte
    |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
    | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
|  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
    |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
| [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
|  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
}